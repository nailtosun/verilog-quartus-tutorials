// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2018 14:11:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Mean
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mean_vlg_sample_tst(
	clk,
	period,
	serial_square_in,
	sampler_tx
);
input  clk;
input [31:0] period;
input [31:0] serial_square_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or period or serial_square_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Mean_vlg_check_tst (
	mean,
	sampler_rx
);
input [31:0] mean;
input sampler_rx;

reg [31:0] mean_expected;

reg [31:0] mean_prev;

reg [31:0] mean_expected_prev;

reg [31:0] last_mean_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	mean_prev = mean;
end

// update expected /o prevs

always @(trigger)
begin
	mean_expected_prev = mean_expected;
end


// expected mean[ 31 ]
initial
begin
	mean_expected[31] = 1'bX;
end 
// expected mean[ 30 ]
initial
begin
	mean_expected[30] = 1'bX;
end 
// expected mean[ 29 ]
initial
begin
	mean_expected[29] = 1'bX;
end 
// expected mean[ 28 ]
initial
begin
	mean_expected[28] = 1'bX;
end 
// expected mean[ 27 ]
initial
begin
	mean_expected[27] = 1'bX;
end 
// expected mean[ 26 ]
initial
begin
	mean_expected[26] = 1'bX;
end 
// expected mean[ 25 ]
initial
begin
	mean_expected[25] = 1'bX;
end 
// expected mean[ 24 ]
initial
begin
	mean_expected[24] = 1'bX;
end 
// expected mean[ 23 ]
initial
begin
	mean_expected[23] = 1'bX;
end 
// expected mean[ 22 ]
initial
begin
	mean_expected[22] = 1'bX;
end 
// expected mean[ 21 ]
initial
begin
	mean_expected[21] = 1'bX;
end 
// expected mean[ 20 ]
initial
begin
	mean_expected[20] = 1'bX;
end 
// expected mean[ 19 ]
initial
begin
	mean_expected[19] = 1'bX;
end 
// expected mean[ 18 ]
initial
begin
	mean_expected[18] = 1'bX;
end 
// expected mean[ 17 ]
initial
begin
	mean_expected[17] = 1'bX;
end 
// expected mean[ 16 ]
initial
begin
	mean_expected[16] = 1'bX;
end 
// expected mean[ 15 ]
initial
begin
	mean_expected[15] = 1'bX;
end 
// expected mean[ 14 ]
initial
begin
	mean_expected[14] = 1'bX;
end 
// expected mean[ 13 ]
initial
begin
	mean_expected[13] = 1'bX;
end 
// expected mean[ 12 ]
initial
begin
	mean_expected[12] = 1'bX;
end 
// expected mean[ 11 ]
initial
begin
	mean_expected[11] = 1'bX;
end 
// expected mean[ 10 ]
initial
begin
	mean_expected[10] = 1'bX;
end 
// expected mean[ 9 ]
initial
begin
	mean_expected[9] = 1'bX;
end 
// expected mean[ 8 ]
initial
begin
	mean_expected[8] = 1'bX;
end 
// expected mean[ 7 ]
initial
begin
	mean_expected[7] = 1'bX;
end 
// expected mean[ 6 ]
initial
begin
	mean_expected[6] = 1'bX;
end 
// expected mean[ 5 ]
initial
begin
	mean_expected[5] = 1'bX;
end 
// expected mean[ 4 ]
initial
begin
	mean_expected[4] = 1'bX;
end 
// expected mean[ 3 ]
initial
begin
	mean_expected[3] = 1'bX;
end 
// expected mean[ 2 ]
initial
begin
	mean_expected[2] = 1'bX;
end 
// expected mean[ 1 ]
initial
begin
	mean_expected[1] = 1'bX;
end 
// expected mean[ 0 ]
initial
begin
	mean_expected[0] = 1'bX;
end 
// generate trigger
always @(mean_expected or mean)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected mean = %b | ",mean_expected_prev);
	$display("| real mean = %b | ",mean_prev);
`endif
	if (
		( mean_expected_prev[0] !== 1'bx ) && ( mean_prev[0] !== mean_expected_prev[0] )
		&& ((mean_expected_prev[0] !== last_mean_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[0] = mean_expected_prev[0];
	end
	if (
		( mean_expected_prev[1] !== 1'bx ) && ( mean_prev[1] !== mean_expected_prev[1] )
		&& ((mean_expected_prev[1] !== last_mean_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[1] = mean_expected_prev[1];
	end
	if (
		( mean_expected_prev[2] !== 1'bx ) && ( mean_prev[2] !== mean_expected_prev[2] )
		&& ((mean_expected_prev[2] !== last_mean_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[2] = mean_expected_prev[2];
	end
	if (
		( mean_expected_prev[3] !== 1'bx ) && ( mean_prev[3] !== mean_expected_prev[3] )
		&& ((mean_expected_prev[3] !== last_mean_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[3] = mean_expected_prev[3];
	end
	if (
		( mean_expected_prev[4] !== 1'bx ) && ( mean_prev[4] !== mean_expected_prev[4] )
		&& ((mean_expected_prev[4] !== last_mean_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[4] = mean_expected_prev[4];
	end
	if (
		( mean_expected_prev[5] !== 1'bx ) && ( mean_prev[5] !== mean_expected_prev[5] )
		&& ((mean_expected_prev[5] !== last_mean_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[5] = mean_expected_prev[5];
	end
	if (
		( mean_expected_prev[6] !== 1'bx ) && ( mean_prev[6] !== mean_expected_prev[6] )
		&& ((mean_expected_prev[6] !== last_mean_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[6] = mean_expected_prev[6];
	end
	if (
		( mean_expected_prev[7] !== 1'bx ) && ( mean_prev[7] !== mean_expected_prev[7] )
		&& ((mean_expected_prev[7] !== last_mean_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[7] = mean_expected_prev[7];
	end
	if (
		( mean_expected_prev[8] !== 1'bx ) && ( mean_prev[8] !== mean_expected_prev[8] )
		&& ((mean_expected_prev[8] !== last_mean_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[8] = mean_expected_prev[8];
	end
	if (
		( mean_expected_prev[9] !== 1'bx ) && ( mean_prev[9] !== mean_expected_prev[9] )
		&& ((mean_expected_prev[9] !== last_mean_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[9] = mean_expected_prev[9];
	end
	if (
		( mean_expected_prev[10] !== 1'bx ) && ( mean_prev[10] !== mean_expected_prev[10] )
		&& ((mean_expected_prev[10] !== last_mean_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[10] = mean_expected_prev[10];
	end
	if (
		( mean_expected_prev[11] !== 1'bx ) && ( mean_prev[11] !== mean_expected_prev[11] )
		&& ((mean_expected_prev[11] !== last_mean_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[11] = mean_expected_prev[11];
	end
	if (
		( mean_expected_prev[12] !== 1'bx ) && ( mean_prev[12] !== mean_expected_prev[12] )
		&& ((mean_expected_prev[12] !== last_mean_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[12] = mean_expected_prev[12];
	end
	if (
		( mean_expected_prev[13] !== 1'bx ) && ( mean_prev[13] !== mean_expected_prev[13] )
		&& ((mean_expected_prev[13] !== last_mean_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[13] = mean_expected_prev[13];
	end
	if (
		( mean_expected_prev[14] !== 1'bx ) && ( mean_prev[14] !== mean_expected_prev[14] )
		&& ((mean_expected_prev[14] !== last_mean_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[14] = mean_expected_prev[14];
	end
	if (
		( mean_expected_prev[15] !== 1'bx ) && ( mean_prev[15] !== mean_expected_prev[15] )
		&& ((mean_expected_prev[15] !== last_mean_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[15] = mean_expected_prev[15];
	end
	if (
		( mean_expected_prev[16] !== 1'bx ) && ( mean_prev[16] !== mean_expected_prev[16] )
		&& ((mean_expected_prev[16] !== last_mean_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[16] = mean_expected_prev[16];
	end
	if (
		( mean_expected_prev[17] !== 1'bx ) && ( mean_prev[17] !== mean_expected_prev[17] )
		&& ((mean_expected_prev[17] !== last_mean_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[17] = mean_expected_prev[17];
	end
	if (
		( mean_expected_prev[18] !== 1'bx ) && ( mean_prev[18] !== mean_expected_prev[18] )
		&& ((mean_expected_prev[18] !== last_mean_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[18] = mean_expected_prev[18];
	end
	if (
		( mean_expected_prev[19] !== 1'bx ) && ( mean_prev[19] !== mean_expected_prev[19] )
		&& ((mean_expected_prev[19] !== last_mean_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[19] = mean_expected_prev[19];
	end
	if (
		( mean_expected_prev[20] !== 1'bx ) && ( mean_prev[20] !== mean_expected_prev[20] )
		&& ((mean_expected_prev[20] !== last_mean_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[20] = mean_expected_prev[20];
	end
	if (
		( mean_expected_prev[21] !== 1'bx ) && ( mean_prev[21] !== mean_expected_prev[21] )
		&& ((mean_expected_prev[21] !== last_mean_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[21] = mean_expected_prev[21];
	end
	if (
		( mean_expected_prev[22] !== 1'bx ) && ( mean_prev[22] !== mean_expected_prev[22] )
		&& ((mean_expected_prev[22] !== last_mean_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[22] = mean_expected_prev[22];
	end
	if (
		( mean_expected_prev[23] !== 1'bx ) && ( mean_prev[23] !== mean_expected_prev[23] )
		&& ((mean_expected_prev[23] !== last_mean_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[23] = mean_expected_prev[23];
	end
	if (
		( mean_expected_prev[24] !== 1'bx ) && ( mean_prev[24] !== mean_expected_prev[24] )
		&& ((mean_expected_prev[24] !== last_mean_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[24] = mean_expected_prev[24];
	end
	if (
		( mean_expected_prev[25] !== 1'bx ) && ( mean_prev[25] !== mean_expected_prev[25] )
		&& ((mean_expected_prev[25] !== last_mean_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[25] = mean_expected_prev[25];
	end
	if (
		( mean_expected_prev[26] !== 1'bx ) && ( mean_prev[26] !== mean_expected_prev[26] )
		&& ((mean_expected_prev[26] !== last_mean_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[26] = mean_expected_prev[26];
	end
	if (
		( mean_expected_prev[27] !== 1'bx ) && ( mean_prev[27] !== mean_expected_prev[27] )
		&& ((mean_expected_prev[27] !== last_mean_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[27] = mean_expected_prev[27];
	end
	if (
		( mean_expected_prev[28] !== 1'bx ) && ( mean_prev[28] !== mean_expected_prev[28] )
		&& ((mean_expected_prev[28] !== last_mean_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[28] = mean_expected_prev[28];
	end
	if (
		( mean_expected_prev[29] !== 1'bx ) && ( mean_prev[29] !== mean_expected_prev[29] )
		&& ((mean_expected_prev[29] !== last_mean_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[29] = mean_expected_prev[29];
	end
	if (
		( mean_expected_prev[30] !== 1'bx ) && ( mean_prev[30] !== mean_expected_prev[30] )
		&& ((mean_expected_prev[30] !== last_mean_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[30] = mean_expected_prev[30];
	end
	if (
		( mean_expected_prev[31] !== 1'bx ) && ( mean_prev[31] !== mean_expected_prev[31] )
		&& ((mean_expected_prev[31] !== last_mean_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mean[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mean_expected_prev);
		$display ("     Real value = %b", mean_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_mean_exp[31] = mean_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Mean_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [31:0] period;
reg [31:0] serial_square_in;
// wires                                               
wire [31:0] mean;

wire sampler;                             

// assign statements (if any)                          
Mean i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.mean(mean),
	.period(period),
	.serial_square_in(serial_square_in)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 
// period[ 31 ]
initial
begin
	period[31] = 1'b0;
end 
// period[ 30 ]
initial
begin
	period[30] = 1'b0;
end 
// period[ 29 ]
initial
begin
	period[29] = 1'b0;
end 
// period[ 28 ]
initial
begin
	period[28] = 1'b0;
end 
// period[ 27 ]
initial
begin
	period[27] = 1'b0;
end 
// period[ 26 ]
initial
begin
	period[26] = 1'b0;
end 
// period[ 25 ]
initial
begin
	period[25] = 1'b0;
end 
// period[ 24 ]
initial
begin
	period[24] = 1'b0;
end 
// period[ 23 ]
initial
begin
	period[23] = 1'b0;
end 
// period[ 22 ]
initial
begin
	period[22] = 1'b0;
end 
// period[ 21 ]
initial
begin
	period[21] = 1'b0;
end 
// period[ 20 ]
initial
begin
	period[20] = 1'b0;
end 
// period[ 19 ]
initial
begin
	period[19] = 1'b0;
end 
// period[ 18 ]
initial
begin
	period[18] = 1'b0;
end 
// period[ 17 ]
initial
begin
	period[17] = 1'b0;
end 
// period[ 16 ]
initial
begin
	period[16] = 1'b0;
end 
// period[ 15 ]
initial
begin
	period[15] = 1'b0;
end 
// period[ 14 ]
initial
begin
	period[14] = 1'b0;
end 
// period[ 13 ]
initial
begin
	period[13] = 1'b0;
end 
// period[ 12 ]
initial
begin
	period[12] = 1'b0;
end 
// period[ 11 ]
initial
begin
	period[11] = 1'b0;
end 
// period[ 10 ]
initial
begin
	period[10] = 1'b0;
end 
// period[ 9 ]
initial
begin
	period[9] = 1'b0;
end 
// period[ 8 ]
initial
begin
	period[8] = 1'b0;
end 
// period[ 7 ]
initial
begin
	period[7] = 1'b1;
end 
// period[ 6 ]
initial
begin
	period[6] = 1'b1;
end 
// period[ 5 ]
initial
begin
	period[5] = 1'b1;
end 
// period[ 4 ]
initial
begin
	period[4] = 1'b1;
end 
// period[ 3 ]
initial
begin
	period[3] = 1'b1;
end 
// period[ 2 ]
initial
begin
	period[2] = 1'b0;
end 
// period[ 1 ]
initial
begin
	period[1] = 1'b1;
end 
// period[ 0 ]
initial
begin
	period[0] = 1'b0;
end 
// serial_square_in[ 31 ]
initial
begin
	serial_square_in[31] = 1'b0;
end 
// serial_square_in[ 30 ]
initial
begin
	serial_square_in[30] = 1'b0;
end 
// serial_square_in[ 29 ]
initial
begin
	serial_square_in[29] = 1'b0;
end 
// serial_square_in[ 28 ]
initial
begin
	serial_square_in[28] = 1'b0;
end 
// serial_square_in[ 27 ]
initial
begin
	serial_square_in[27] = 1'b0;
end 
// serial_square_in[ 26 ]
initial
begin
	serial_square_in[26] = 1'b0;
end 
// serial_square_in[ 25 ]
initial
begin
	serial_square_in[25] = 1'b0;
end 
// serial_square_in[ 24 ]
initial
begin
	serial_square_in[24] = 1'b0;
end 
// serial_square_in[ 23 ]
initial
begin
	serial_square_in[23] = 1'b0;
end 
// serial_square_in[ 22 ]
initial
begin
	serial_square_in[22] = 1'b0;
end 
// serial_square_in[ 21 ]
initial
begin
	serial_square_in[21] = 1'b0;
end 
// serial_square_in[ 20 ]
initial
begin
	serial_square_in[20] = 1'b0;
end 
// serial_square_in[ 19 ]
initial
begin
	serial_square_in[19] = 1'b0;
end 
// serial_square_in[ 18 ]
initial
begin
	serial_square_in[18] = 1'b0;
end 
// serial_square_in[ 17 ]
initial
begin
	serial_square_in[17] = 1'b0;
end 
// serial_square_in[ 16 ]
initial
begin
	serial_square_in[16] = 1'b0;
end 
// serial_square_in[ 15 ]
initial
begin
	serial_square_in[15] = 1'b0;
end 
// serial_square_in[ 14 ]
initial
begin
	serial_square_in[14] = 1'b0;
end 
// serial_square_in[ 13 ]
initial
begin
	serial_square_in[13] = 1'b0;
end 
// serial_square_in[ 12 ]
initial
begin
	serial_square_in[12] = 1'b0;
end 
// serial_square_in[ 11 ]
initial
begin
	serial_square_in[11] = 1'b0;
end 
// serial_square_in[ 10 ]
initial
begin
	serial_square_in[10] = 1'b0;
end 
// serial_square_in[ 9 ]
initial
begin
	serial_square_in[9] = 1'b0;
end 
// serial_square_in[ 8 ]
initial
begin
	serial_square_in[8] = 1'b0;
end 
// serial_square_in[ 7 ]
initial
begin
	serial_square_in[7] = 1'b0;
end 
// serial_square_in[ 6 ]
initial
begin
	serial_square_in[6] = 1'b0;
	serial_square_in[6] = #800000 1'b1;
	serial_square_in[6] = #50000 1'b0;
end 
// serial_square_in[ 5 ]
initial
begin
	serial_square_in[5] = 1'b0;
	serial_square_in[5] = #150000 1'b1;
	serial_square_in[5] = #100000 1'b0;
	serial_square_in[5] = #100000 1'b1;
	serial_square_in[5] = #150000 1'b0;
	serial_square_in[5] = #50000 1'b1;
	serial_square_in[5] = #50000 1'b0;
	serial_square_in[5] = #50000 1'b1;
	serial_square_in[5] = #100000 1'b0;
	serial_square_in[5] = #50000 1'b1;
	serial_square_in[5] = #50000 1'b0;
	serial_square_in[5] = #50000 1'b1;
end 
// serial_square_in[ 4 ]
initial
begin
	serial_square_in[4] = 1'b0;
	serial_square_in[4] = #50000 1'b1;
	serial_square_in[4] = #100000 1'b0;
	serial_square_in[4] = #50000 1'b1;
	serial_square_in[4] = #50000 1'b0;
	serial_square_in[4] = #50000 1'b1;
	serial_square_in[4] = #100000 1'b0;
	serial_square_in[4] = #50000 1'b1;
	serial_square_in[4] = #50000 1'b0;
	serial_square_in[4] = #50000 1'b1;
	serial_square_in[4] = #100000 1'b0;
	serial_square_in[4] = #50000 1'b1;
	serial_square_in[4] = #50000 1'b0;
	serial_square_in[4] = #100000 1'b1;
	serial_square_in[4] = #50000 1'b0;
	serial_square_in[4] = #50000 1'b1;
end 
// serial_square_in[ 3 ]
initial
begin
	serial_square_in[3] = 1'b1;
	serial_square_in[3] = #50000 1'b0;
	serial_square_in[3] = #50000 1'b1;
	serial_square_in[3] = #100000 1'b0;
	serial_square_in[3] = #50000 1'b1;
	serial_square_in[3] = #50000 1'b0;
	serial_square_in[3] = #100000 1'b1;
	serial_square_in[3] = #50000 1'b0;
	serial_square_in[3] = #50000 1'b1;
	serial_square_in[3] = #200000 1'b0;
	serial_square_in[3] = #50000 1'b1;
	serial_square_in[3] = #50000 1'b0;
	serial_square_in[3] = #50000 1'b1;
	serial_square_in[3] = #100000 1'b0;
end 
// serial_square_in[ 2 ]
initial
begin
	serial_square_in[2] = 1'b0;
	serial_square_in[2] = #50000 1'b1;
	serial_square_in[2] = #100000 1'b0;
	serial_square_in[2] = #150000 1'b1;
	serial_square_in[2] = #50000 1'b0;
	serial_square_in[2] = #200000 1'b1;
	serial_square_in[2] = #100000 1'b0;
	serial_square_in[2] = #150000 1'b1;
	serial_square_in[2] = #100000 1'b0;
end 
// serial_square_in[ 1 ]
initial
begin
	serial_square_in[1] = 1'b1;
	serial_square_in[1] = #50000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #50000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #100000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #50000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #100000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #50000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #100000 1'b0;
	serial_square_in[1] = #50000 1'b1;
	serial_square_in[1] = #50000 1'b0;
	serial_square_in[1] = #50000 1'b1;
end 
// serial_square_in[ 0 ]
initial
begin
	serial_square_in[0] = 1'b0;
end 

Mean_vlg_sample_tst tb_sample (
	.clk(clk),
	.period(period),
	.serial_square_in(serial_square_in),
	.sampler_tx(sampler)
);

Mean_vlg_check_tst tb_out(
	.mean(mean),
	.sampler_rx(sampler)
);
endmodule

