// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2018 00:32:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    frequencyfinder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module frequencyfinder_vlg_sample_tst(
	clk,
	pushbuttond,
	pushbuttoni,
	serial_in,
	sampler_tx
);
input  clk;
input  pushbuttond;
input  pushbuttoni;
input [11:0] serial_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or pushbuttond or pushbuttoni or serial_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module frequencyfinder_vlg_check_tst (
	period,
	sampler_rx
);
input [31:0] period;
input sampler_rx;

reg [31:0] period_expected;

reg [31:0] period_prev;

reg [31:0] period_expected_prev;

reg [31:0] last_period_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	period_prev = period;
end

// update expected /o prevs

always @(trigger)
begin
	period_expected_prev = period_expected;
end


// expected period[ 31 ]
initial
begin
	period_expected[31] = 1'bX;
end 
// expected period[ 30 ]
initial
begin
	period_expected[30] = 1'bX;
end 
// expected period[ 29 ]
initial
begin
	period_expected[29] = 1'bX;
end 
// expected period[ 28 ]
initial
begin
	period_expected[28] = 1'bX;
end 
// expected period[ 27 ]
initial
begin
	period_expected[27] = 1'bX;
end 
// expected period[ 26 ]
initial
begin
	period_expected[26] = 1'bX;
end 
// expected period[ 25 ]
initial
begin
	period_expected[25] = 1'bX;
end 
// expected period[ 24 ]
initial
begin
	period_expected[24] = 1'bX;
end 
// expected period[ 23 ]
initial
begin
	period_expected[23] = 1'bX;
end 
// expected period[ 22 ]
initial
begin
	period_expected[22] = 1'bX;
end 
// expected period[ 21 ]
initial
begin
	period_expected[21] = 1'bX;
end 
// expected period[ 20 ]
initial
begin
	period_expected[20] = 1'bX;
end 
// expected period[ 19 ]
initial
begin
	period_expected[19] = 1'bX;
end 
// expected period[ 18 ]
initial
begin
	period_expected[18] = 1'bX;
end 
// expected period[ 17 ]
initial
begin
	period_expected[17] = 1'bX;
end 
// expected period[ 16 ]
initial
begin
	period_expected[16] = 1'bX;
end 
// expected period[ 15 ]
initial
begin
	period_expected[15] = 1'bX;
end 
// expected period[ 14 ]
initial
begin
	period_expected[14] = 1'bX;
end 
// expected period[ 13 ]
initial
begin
	period_expected[13] = 1'bX;
end 
// expected period[ 12 ]
initial
begin
	period_expected[12] = 1'bX;
end 
// expected period[ 11 ]
initial
begin
	period_expected[11] = 1'bX;
end 
// expected period[ 10 ]
initial
begin
	period_expected[10] = 1'bX;
end 
// expected period[ 9 ]
initial
begin
	period_expected[9] = 1'bX;
end 
// expected period[ 8 ]
initial
begin
	period_expected[8] = 1'bX;
end 
// expected period[ 7 ]
initial
begin
	period_expected[7] = 1'bX;
end 
// expected period[ 6 ]
initial
begin
	period_expected[6] = 1'bX;
end 
// expected period[ 5 ]
initial
begin
	period_expected[5] = 1'bX;
end 
// expected period[ 4 ]
initial
begin
	period_expected[4] = 1'bX;
end 
// expected period[ 3 ]
initial
begin
	period_expected[3] = 1'bX;
end 
// expected period[ 2 ]
initial
begin
	period_expected[2] = 1'bX;
end 
// expected period[ 1 ]
initial
begin
	period_expected[1] = 1'bX;
end 
// expected period[ 0 ]
initial
begin
	period_expected[0] = 1'bX;
end 
// generate trigger
always @(period_expected or period)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected period = %b | ",period_expected_prev);
	$display("| real period = %b | ",period_prev);
`endif
	if (
		( period_expected_prev[0] !== 1'bx ) && ( period_prev[0] !== period_expected_prev[0] )
		&& ((period_expected_prev[0] !== last_period_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[0] = period_expected_prev[0];
	end
	if (
		( period_expected_prev[1] !== 1'bx ) && ( period_prev[1] !== period_expected_prev[1] )
		&& ((period_expected_prev[1] !== last_period_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[1] = period_expected_prev[1];
	end
	if (
		( period_expected_prev[2] !== 1'bx ) && ( period_prev[2] !== period_expected_prev[2] )
		&& ((period_expected_prev[2] !== last_period_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[2] = period_expected_prev[2];
	end
	if (
		( period_expected_prev[3] !== 1'bx ) && ( period_prev[3] !== period_expected_prev[3] )
		&& ((period_expected_prev[3] !== last_period_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[3] = period_expected_prev[3];
	end
	if (
		( period_expected_prev[4] !== 1'bx ) && ( period_prev[4] !== period_expected_prev[4] )
		&& ((period_expected_prev[4] !== last_period_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[4] = period_expected_prev[4];
	end
	if (
		( period_expected_prev[5] !== 1'bx ) && ( period_prev[5] !== period_expected_prev[5] )
		&& ((period_expected_prev[5] !== last_period_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[5] = period_expected_prev[5];
	end
	if (
		( period_expected_prev[6] !== 1'bx ) && ( period_prev[6] !== period_expected_prev[6] )
		&& ((period_expected_prev[6] !== last_period_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[6] = period_expected_prev[6];
	end
	if (
		( period_expected_prev[7] !== 1'bx ) && ( period_prev[7] !== period_expected_prev[7] )
		&& ((period_expected_prev[7] !== last_period_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[7] = period_expected_prev[7];
	end
	if (
		( period_expected_prev[8] !== 1'bx ) && ( period_prev[8] !== period_expected_prev[8] )
		&& ((period_expected_prev[8] !== last_period_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[8] = period_expected_prev[8];
	end
	if (
		( period_expected_prev[9] !== 1'bx ) && ( period_prev[9] !== period_expected_prev[9] )
		&& ((period_expected_prev[9] !== last_period_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[9] = period_expected_prev[9];
	end
	if (
		( period_expected_prev[10] !== 1'bx ) && ( period_prev[10] !== period_expected_prev[10] )
		&& ((period_expected_prev[10] !== last_period_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[10] = period_expected_prev[10];
	end
	if (
		( period_expected_prev[11] !== 1'bx ) && ( period_prev[11] !== period_expected_prev[11] )
		&& ((period_expected_prev[11] !== last_period_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[11] = period_expected_prev[11];
	end
	if (
		( period_expected_prev[12] !== 1'bx ) && ( period_prev[12] !== period_expected_prev[12] )
		&& ((period_expected_prev[12] !== last_period_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[12] = period_expected_prev[12];
	end
	if (
		( period_expected_prev[13] !== 1'bx ) && ( period_prev[13] !== period_expected_prev[13] )
		&& ((period_expected_prev[13] !== last_period_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[13] = period_expected_prev[13];
	end
	if (
		( period_expected_prev[14] !== 1'bx ) && ( period_prev[14] !== period_expected_prev[14] )
		&& ((period_expected_prev[14] !== last_period_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[14] = period_expected_prev[14];
	end
	if (
		( period_expected_prev[15] !== 1'bx ) && ( period_prev[15] !== period_expected_prev[15] )
		&& ((period_expected_prev[15] !== last_period_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[15] = period_expected_prev[15];
	end
	if (
		( period_expected_prev[16] !== 1'bx ) && ( period_prev[16] !== period_expected_prev[16] )
		&& ((period_expected_prev[16] !== last_period_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[16] = period_expected_prev[16];
	end
	if (
		( period_expected_prev[17] !== 1'bx ) && ( period_prev[17] !== period_expected_prev[17] )
		&& ((period_expected_prev[17] !== last_period_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[17] = period_expected_prev[17];
	end
	if (
		( period_expected_prev[18] !== 1'bx ) && ( period_prev[18] !== period_expected_prev[18] )
		&& ((period_expected_prev[18] !== last_period_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[18] = period_expected_prev[18];
	end
	if (
		( period_expected_prev[19] !== 1'bx ) && ( period_prev[19] !== period_expected_prev[19] )
		&& ((period_expected_prev[19] !== last_period_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[19] = period_expected_prev[19];
	end
	if (
		( period_expected_prev[20] !== 1'bx ) && ( period_prev[20] !== period_expected_prev[20] )
		&& ((period_expected_prev[20] !== last_period_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[20] = period_expected_prev[20];
	end
	if (
		( period_expected_prev[21] !== 1'bx ) && ( period_prev[21] !== period_expected_prev[21] )
		&& ((period_expected_prev[21] !== last_period_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[21] = period_expected_prev[21];
	end
	if (
		( period_expected_prev[22] !== 1'bx ) && ( period_prev[22] !== period_expected_prev[22] )
		&& ((period_expected_prev[22] !== last_period_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[22] = period_expected_prev[22];
	end
	if (
		( period_expected_prev[23] !== 1'bx ) && ( period_prev[23] !== period_expected_prev[23] )
		&& ((period_expected_prev[23] !== last_period_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[23] = period_expected_prev[23];
	end
	if (
		( period_expected_prev[24] !== 1'bx ) && ( period_prev[24] !== period_expected_prev[24] )
		&& ((period_expected_prev[24] !== last_period_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[24] = period_expected_prev[24];
	end
	if (
		( period_expected_prev[25] !== 1'bx ) && ( period_prev[25] !== period_expected_prev[25] )
		&& ((period_expected_prev[25] !== last_period_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[25] = period_expected_prev[25];
	end
	if (
		( period_expected_prev[26] !== 1'bx ) && ( period_prev[26] !== period_expected_prev[26] )
		&& ((period_expected_prev[26] !== last_period_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[26] = period_expected_prev[26];
	end
	if (
		( period_expected_prev[27] !== 1'bx ) && ( period_prev[27] !== period_expected_prev[27] )
		&& ((period_expected_prev[27] !== last_period_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[27] = period_expected_prev[27];
	end
	if (
		( period_expected_prev[28] !== 1'bx ) && ( period_prev[28] !== period_expected_prev[28] )
		&& ((period_expected_prev[28] !== last_period_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[28] = period_expected_prev[28];
	end
	if (
		( period_expected_prev[29] !== 1'bx ) && ( period_prev[29] !== period_expected_prev[29] )
		&& ((period_expected_prev[29] !== last_period_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[29] = period_expected_prev[29];
	end
	if (
		( period_expected_prev[30] !== 1'bx ) && ( period_prev[30] !== period_expected_prev[30] )
		&& ((period_expected_prev[30] !== last_period_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[30] = period_expected_prev[30];
	end
	if (
		( period_expected_prev[31] !== 1'bx ) && ( period_prev[31] !== period_expected_prev[31] )
		&& ((period_expected_prev[31] !== last_period_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port period[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", period_expected_prev);
		$display ("     Real value = %b", period_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_period_exp[31] = period_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module frequencyfinder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg pushbuttond;
reg pushbuttoni;
reg [11:0] serial_in;
// wires                                               
wire [31:0] period;

wire sampler;                             

// assign statements (if any)                          
frequencyfinder i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.period(period),
	.pushbuttond(pushbuttond),
	.pushbuttoni(pushbuttoni),
	.serial_in(serial_in)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// pushbuttond
initial
begin
	pushbuttond = 1'b1;
end 

// pushbuttoni
initial
begin
	pushbuttoni = 1'b1;
end 
// serial_in[ 11 ]
initial
begin
	serial_in[11] = 1'b0;
end 
// serial_in[ 10 ]
initial
begin
	serial_in[10] = 1'b0;
end 
// serial_in[ 9 ]
initial
begin
	serial_in[9] = 1'b0;
end 
// serial_in[ 8 ]
initial
begin
	serial_in[8] = 1'b0;
end 
// serial_in[ 7 ]
initial
begin
	serial_in[7] = 1'b0;
end 
// serial_in[ 6 ]
initial
begin
	serial_in[6] = 1'b0;
end 
// serial_in[ 5 ]
initial
begin
	serial_in[5] = 1'b0;
end 
// serial_in[ 4 ]
initial
begin
	serial_in[4] = 1'b0;
end 
// serial_in[ 3 ]
initial
begin
	serial_in[3] = 1'b0;
end 
// serial_in[ 2 ]
initial
begin
	serial_in[2] = 1'b0;
	serial_in[2] = #100000 1'b1;
	serial_in[2] = #75000 1'b0;
	serial_in[2] = #175000 1'b1;
	serial_in[2] = #75000 1'b0;
	serial_in[2] = #175000 1'b1;
	serial_in[2] = #75000 1'b0;
	serial_in[2] = #175000 1'b1;
	serial_in[2] = #75000 1'b0;
end 
// serial_in[ 1 ]
initial
begin
	serial_in[1] = 1'b0;
	serial_in[1] = #50000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
	serial_in[1] = #75000 1'b1;
	serial_in[1] = #50000 1'b0;
end 
// serial_in[ 0 ]
initial
begin
	serial_in[0] = 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
	serial_in[0] = #25000 1'b0;
	serial_in[0] = #25000 1'b1;
end 

frequencyfinder_vlg_sample_tst tb_sample (
	.clk(clk),
	.pushbuttond(pushbuttond),
	.pushbuttoni(pushbuttoni),
	.serial_in(serial_in),
	.sampler_tx(sampler)
);

frequencyfinder_vlg_check_tst tb_out(
	.period(period),
	.sampler_rx(sampler)
);
endmodule

